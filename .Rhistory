x <- x[(which(x$name == 'Alachua')):nrow(x),]
# gather x
x <- gather(x, date, participation, starts_with('date'))
# clean date column
x$date <- as.Date(gsub("date", "", x$date), format = '%Y-%m-%d')
return(x)
}
first_tri_enroll2 <- clean_enroll2(first_tri_enroll2)
View(first_tri_enroll2)
first_tri_time1 <- read_excel('data/First_Trimester_Entry_Into_WIC_By_Time_Period.xlsx', 1, col_names = FALSE)
# Make function to clean first_tri_time1
clean_tri_1 <- function(x){
# subset x by removing columns that are filled entirely with NAs
x <- x[, colSums(is.na(x)) < nrow(x)]
# drop first row
x$X0 <- NULL
# Get first column name
names(x)[1] <- 'county'
# Standardize column names for the rest of the data
for (j in 2:ncol(x)){
column_indicator <- j
# manipulate the date objects
if(j == ncol(x)){
column_indicator <- column_indicator - 1
}else{
if(is.na(x[2,column_indicator])){
column_indicator <- column_indicator +1
if(is.na(x[2, column_indicator])){
column_indicator <- column_indicator - 2
}
}
}
# Fix column indicator for last column
column_indicator <- ifelse(column_indicator > ncol(x),
ncol(x)-1, column_indicator)
# Get the date object
date_object <- unlist(strsplit(as.character(x[2,column_indicator]), ' - '))
# Deal with differential number vs. hyphenated date stuff
if(length(date_object) == 2){
date_object <- date_object[length(date_object)]
# Extract the quarter
quarter <- ifelse(grepl('Mar', date_object), 1,
ifelse(grepl('Jun', date_object), 2,
ifelse(grepl('Sep', date_object), 3,
ifelse(grepl('Dec', date_object), 4, NA))))
# Extract the year
year <- as.numeric(unlist(strsplit(date_object, '-'))[2])
} else {
# Convert from excel to r date
date_object <- as.Date(as.numeric(date_object), origin = '1899-12-30')
# Extract the quarter
month <- as.numeric(format(date_object, '%m'))
quarter <- ((month-1) %/% 3) + 1
# Extract the year
year <- as.numeric(format(date_object, '%Y'))
}
# Paste together the quarter, year and third row info
column_name <- paste0(year,"_", quarter,"_", x[3,j])
# Stick that column name where it belongs
names(x)[j] <- column_name
}
# remove first 3 rows
x <- x[4:nrow(x),]
# gather
x <- gather(x, key, value, 2:ncol(x))
# strsplit the key on underscore creating year, quarter and description columns
list <- strsplit(as.character(x$key), '_')
# turn list into data table object
temp <- ldply(list)
# make column names
colnames(temp) <- c("year", "quarter", "class")
# put back into x
x <- cbind(x, temp)
# remove extra columns in x
x <- x[, c("county", "year", "quarter", "class", "value")]
return(x)
}
# apply function to get clean data set
first_tri_time1 <- clean_tri_1(first_tri_time1)
View(first_tri_time1)
View(first_tri_time1)
# Make function to clean first_tri_time1
clean_tri_1 <- function(x){
# subset x by removing columns that are filled entirely with NAs
x <- x[, colSums(is.na(x)) < nrow(x)]
# drop first row
x$X0 <- NULL
# Get first column name
names(x)[1] <- 'county'
# Standardize column names for the rest of the data
for (j in 2:ncol(x)){
column_indicator <- j
# manipulate the date objects
if(j == ncol(x)){
column_indicator <- column_indicator - 1
}else{
if(is.na(x[2,column_indicator])){
column_indicator <- column_indicator +1
if(is.na(x[2, column_indicator])){
column_indicator <- column_indicator - 2
}
}
}
# Fix column indicator for last column
column_indicator <- ifelse(column_indicator > ncol(x),
ncol(x)-1, column_indicator)
# Get the date object
date_object <- unlist(strsplit(as.character(x[2,column_indicator]), ' - '))
# Deal with differential number vs. hyphenated date stuff
if(length(date_object) == 2){
date_object <- date_object[length(date_object)]
# Extract the quarter
quarter <- ifelse(grepl('Mar', date_object), 1,
ifelse(grepl('Jun', date_object), 2,
ifelse(grepl('Sep', date_object), 3,
ifelse(grepl('Dec', date_object), 4, NA))))
# Extract the year
year <- as.numeric(unlist(strsplit(date_object, '-'))[2])
} else {
# Convert from excel to r date
date_object <- as.Date(as.numeric(date_object), origin = '1899-12-30')
# Extract the quarter
month <- as.numeric(format(date_object, '%m'))
quarter <- ((month-1) %/% 3) + 1
# Extract the year
year <- as.numeric(format(date_object, '%Y'))
}
# Paste together the quarter, year and third row info
column_name <- paste0(year,"_", quarter,"_", x[3,j])
# Stick that column name where it belongs
names(x)[j] <- column_name
}
# remove first 3 rows
x <- x[4:nrow(x),]
# gather
x <- gather(x, key, value, 2:ncol(x))
# strsplit the key on underscore creating year, quarter and description columns
list <- strsplit(as.character(x$key), '_')
# turn list into data table object
temp <- ldply(list)
# make column names
colnames(temp) <- c("year", "quarter", "class")
# put back into x
x <- cbind(x, temp)
# remove extra columns in x
x <- x[, c("county", "year", "quarter", "class", "value")]
# remove state
x <- x[x$county != 'State',]
# remove if "As of"
x <- x[!grepl("As of", x$county)]
return(x)
}
first_tri_time1 <- clean_tri_1(first_tri_time1)
?grepl
View(first_tri_time1)
first_tri_time1 <- read_excel('data/First_Trimester_Entry_Into_WIC_By_Time_Period.xlsx', 1, col_names = FALSE)
# Make function to clean first_tri_time1
clean_tri_1 <- function(x){
# subset x by removing columns that are filled entirely with NAs
x <- x[, colSums(is.na(x)) < nrow(x)]
# drop first row
x$X0 <- NULL
# Get first column name
names(x)[1] <- 'county'
# Standardize column names for the rest of the data
for (j in 2:ncol(x)){
column_indicator <- j
# manipulate the date objects
if(j == ncol(x)){
column_indicator <- column_indicator - 1
}else{
if(is.na(x[2,column_indicator])){
column_indicator <- column_indicator +1
if(is.na(x[2, column_indicator])){
column_indicator <- column_indicator - 2
}
}
}
# Fix column indicator for last column
column_indicator <- ifelse(column_indicator > ncol(x),
ncol(x)-1, column_indicator)
# Get the date object
date_object <- unlist(strsplit(as.character(x[2,column_indicator]), ' - '))
# Deal with differential number vs. hyphenated date stuff
if(length(date_object) == 2){
date_object <- date_object[length(date_object)]
# Extract the quarter
quarter <- ifelse(grepl('Mar', date_object), 1,
ifelse(grepl('Jun', date_object), 2,
ifelse(grepl('Sep', date_object), 3,
ifelse(grepl('Dec', date_object), 4, NA))))
# Extract the year
year <- as.numeric(unlist(strsplit(date_object, '-'))[2])
} else {
# Convert from excel to r date
date_object <- as.Date(as.numeric(date_object), origin = '1899-12-30')
# Extract the quarter
month <- as.numeric(format(date_object, '%m'))
quarter <- ((month-1) %/% 3) + 1
# Extract the year
year <- as.numeric(format(date_object, '%Y'))
}
# Paste together the quarter, year and third row info
column_name <- paste0(year,"_", quarter,"_", x[3,j])
# Stick that column name where it belongs
names(x)[j] <- column_name
}
# remove first 3 rows
x <- x[4:nrow(x),]
# gather
x <- gather(x, key, value, 2:ncol(x))
# strsplit the key on underscore creating year, quarter and description columns
list <- strsplit(as.character(x$key), '_')
# turn list into data table object
temp <- ldply(list)
# make column names
colnames(temp) <- c("year", "quarter", "class")
# put back into x
x <- cbind(x, temp)
# remove extra columns in x
x <- x[, c("county", "year", "quarter", "class", "value")]
# remove state
x <- x[x$county != 'State',]
# remove if "As of"
x <- x[!grepl("As of", x$county),]
return(x)
}
# apply function to get clean data set
first_tri_time1 <- clean_tri_1(first_tri_time1)
View(first_tri_time1)
healthy_weight1 <- read_excel('data/Healthy_Weight.xlsx', 1, col_names = FALSE)
healthy_weight2 <- read_excel('data/Healthy_Weight.xlsx', 2, col_names = FALSE)
# Create function to clean both healthy_weight tables
clean_weight <- function(x){
# drop columns with all NAs
x <- x[, colSums(is.na(x)) < nrow(x)]
# drop first column
x$X0 <- NULL
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make names for county
names(x)[1] <- "county_name"
# make name for other columns converting 1st row into date time from excel
names(x)[2:ncol(x)] <- paste0("date", as.Date(as.numeric(x[1,2:ncol(x)]), origin = '1899-12-30'))
# clean up county by removing spaces
x$county_name <- gsub("\\s+", "", x$county_name)
# drop rows up until alachua
x <- x[which(x$county_name == 'Alachua'):nrow(x),]
# gather x
x <- gather(x, date, value, starts_with('date'))
# clean up date column
x$date <- as.Date(gsub("date", "", x$date), format = '%Y-%m-%d')
return(x)
}
healthy_weight1 <- clean_weight(healthy_weight1)
healthy_weight2 <- clean_weight(healthy_weight2)
View(healthy_weight1)
healthy_weight1 <- read_excel('data/Healthy_Weight.xlsx', 1, col_names = FALSE)
healthy_weight2 <- read_excel('data/Healthy_Weight.xlsx', 2, col_names = FALSE)
# Create function to clean both healthy_weight tables
clean_weight <- function(x){
# drop columns with all NAs
x <- x[, colSums(is.na(x)) < nrow(x)]
# drop first column
x$X0 <- NULL
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make names for county
names(x)[1] <- "county_name"
# make name for other columns converting 1st row into date time from excel
names(x)[2:ncol(x)] <- paste0("date", as.Date(as.numeric(x[1,2:ncol(x)]), origin = '1899-12-30'))
# clean up county by removing spaces
x$county_name <- gsub("\\s+", "", x$county_name)
# drop rows up until alachua
x <- x[which(x$county_name == 'Alachua'):nrow(x),]
# gather x
x <- gather(x, date, value, starts_with('date'))
# clean up date column
x$date <- as.Date(gsub("date", "", x$date), format = '%Y-%m-%d')
# remove state
x <- x[x$county != 'State',]
return(x)
}
healthy_weight1 <- clean_weight(healthy_weight1)
healthy_weight2 <- clean_weight(healthy_weight2)
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
infants_fed2_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 2, col_names = FALSE)
infants_fed3_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 3, col_names = FALSE)
# Write function to clean infants_fed1_june
clean_infants_june1 <- function(x){
# drop first and last column
x$X0 <- NULL
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make names for county
names(x) <- c("name", "bf_infants", "all_infants")
# drop first row
# clean up county by removing spaces
x$name <- gsub("\\s+", "", x$name)
x <- x[(which(x$name == 'Alachua')):nrow(x),]
return(x)
}
infants_fed1_june <- clean_infants_june1(infants_fed1_june)
View(infants_fed1_june)
##### Read in all 4 sheets from Infants Breastfed for 26 weeks june 2015.xlsx
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
infants_fed2_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 2, col_names = FALSE)
infants_fed3_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 3, col_names = FALSE)
# Write function to clean infants_fed1_june
clean_infants_june1 <- function(x){
# drop first and last column
x$X0 <- NULL
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make names for county
names(x) <- c("name", "bf_infants", "all_infants")
# drop first row
# clean up county by removing spaces
x$name <- gsub("\\s+", "", x$name)
x <- x[(which(x$name == 'Alachua')):nrow(x),]
# remove state
x <- x[x$county != 'State',]
return(x)
}
infants_fed1_june <- clean_infants_june1(infants_fed1_june)
# make function for infants_fed2_june
clean_infants_june2 <- function(x){
# drop any row that has "total" in it
x <- x[!grepl("Total", x$X0),]
# drop columns with all NAs
x <- x[, colSums(is.na(x)) < nrow(x)]
# drop last column
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make new names of columns
names(x) <- c("agency", "site", "bf_infants", "ever_bf_infants")
# clean up county by removing spaces
x$agency <- gsub("\\s+", "", x$agency)
# drop first row
x <- x[2:nrow(x),]
# remove state
x <- x[x$county != 'State',]
return(x)
}
# apply new function to infants_fed2_june
infants_fed2_june <- clean_infants_june2(infants_fed2_june)
# Use first clean_infants_june function on infants_fed3_june
infants_fed3_june <- clean_infants_june1(infants_fed3_june)
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
infants_fed2_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 2, col_names = FALSE)
infants_fed3_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 3, col_names = FALSE)
# Write function to clean infants_fed1_june
clean_infants_june1 <- function(x){
# drop first and last column
x$X0 <- NULL
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make names for county
names(x) <- c("name", "bf_infants", "all_infants")
# drop first row
# clean up county by removing spaces
x$name <- gsub("\\s+", "", x$name)
x <- x[(which(x$name == 'Alachua')):nrow(x),]
# remove state
x <- x[x$county != 'State',]
return(x)
}
infants_fed1_june <- clean_infants_june1(infants_fed1_june)
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
infants_fed2_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 2, col_names = FALSE)
infants_fed3_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 3, col_names = FALSE)
View(infants_fed1_june)
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
infants_fed2_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 2, col_names = FALSE)
infants_fed3_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 3, col_names = FALSE)
# Write function to clean infants_fed1_june
clean_infants_june1 <- function(x){
# drop first and last column
x$X0 <- NULL
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make names for county
names(x) <- c("agency_name", "bf_infants", "all_infants")
# drop first row
# clean up county by removing spaces
x$name <- gsub("\\s+", "", x$name)
x <- x[(which(x$name == 'Alachua')):nrow(x),]
# remove state
x <- x[x$agency_name != 'State',]
return(x)
}
infants_fed1_june <- clean_infants_june1(infants_fed1_june)
# make function for infants_fed2_june
clean_infants_june2 <- function(x){
# drop any row that has "total" in it
x <- x[!grepl("Total", x$X0),]
# drop columns with all NAs
x <- x[, colSums(is.na(x)) < nrow(x)]
# drop last column
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make new names of columns
names(x) <- c("agency_name", "site", "bf_infants", "ever_bf_infants")
# clean up county by removing spaces
x$agency <- gsub("\\s+", "", x$agency)
# drop first row
x <- x[2:nrow(x),]
# remove state
x <- x[x$agency_name != 'State',]
return(x)
}
# apply new function to infants_fed2_june
infants_fed2_june <- clean_infants_june2(infants_fed2_june)
# Use first clean_infants_june function on infants_fed3_june
infants_fed3_june <- clean_infants_june1(infants_fed3_june)
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
infants_fed2_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 2, col_names = FALSE)
infants_fed3_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 3, col_names = FALSE)
# Write function to clean infants_fed1_june
clean_infants_june1 <- function(x){
# drop first and last column
x$X0 <- NULL
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make names for county
names(x) <- c("agency_name", "bf_infants", "all_infants")
# drop first row
# clean up county by removing spaces
x$name <- gsub("\\s+", "", x$name)
x <- x[(which(x$name == 'Alachua')):nrow(x),]
# remove state
x <- x[x$agency_name != 'State',]
return(x)
}
infants_fed1_june <- clean_infants_june1(infants_fed1_june)
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
View(infants_fed1_june)
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
x = infants_fed1_june
x$X0 <- NULL
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
View(x)
# make names for county
names(x) <- c("agency_name", "bf_infants", "all_infants")
# drop first row
View(x)
x$agency_name <- gsub("\\s+", "", x$agency_name)
x$agency_name <- gsub("\\s+", "", x$agency_name)
x <- x[(which(x$agency_name == 'Alachua')):nrow(x),]
# remove state
x <- x[x$agency_name != 'State',]
View(x)
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
infants_fed1_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 1, col_names = FALSE)
infants_fed2_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 2, col_names = FALSE)
infants_fed3_june <- read_excel('data/Infants Breastfed for 26 weeks June 2015.xlsx', 3, col_names = FALSE)
# Write function to clean infants_fed1_june
clean_infants_june1 <- function(x){
# drop first and last column
x$X0 <- NULL
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make names for county
names(x) <- c("agency_name", "bf_infants", "all_infants")
# drop first row
# clean up county by removing spaces
x$agency_name <- gsub("\\s+", "", x$agency_name)
x <- x[(which(x$agency_name == 'Alachua')):nrow(x),]
# remove state
x <- x[x$agency_name != 'State',]
return(x)
}
infants_fed1_june <- clean_infants_june1(infants_fed1_june)
# make function for infants_fed2_june
clean_infants_june2 <- function(x){
# drop any row that has "total" in it
x <- x[!grepl("Total", x$X0),]
# drop columns with all NAs
x <- x[, colSums(is.na(x)) < nrow(x)]
# drop last column
x <- x[, 1:(ncol(x) -1) ]
# drop top rows filled with NAs
x <- x[complete.cases(x),]
# make new names of columns
names(x) <- c("agency_name", "site", "bf_infants", "ever_bf_infants")
# clean up county by removing spaces
x$agency_name <- gsub("\\s+", "", x$agency_name)
# drop first row
x <- x[2:nrow(x),]
# remove state
x <- x[x$agency_name != 'State',]
return(x)
}
infants_fed2_june <- clean_infants_june2(infants_fed2_june)
# Use first clean_infants_june function on infants_fed3_june
infants_fed3_june <- clean_infants_june1(infants_fed3_june)
View(infants_fed2_june)
View(infants_fed3_june)
View(infants_fed3_june)
View(infants_fed2_june)
infants_fed1 <- read_excel('data/Infants_Breastfed_For_26_Weeks.xlsx', 1, col_names = FALSE)
infants_fed2 <- read_excel('data/Infants_Breastfed_For_26_Weeks.xlsx', 2, col_names = FALSE)
